name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug - Show Docker Username
        run: echo "DOCKER_USERNAME=$DOCKER_USERNAME"

      - name: Build Docker image
        run: |
          echo "Building Docker image for $DOCKER_USERNAME"
          docker build -t "${DOCKER_USERNAME}/blockhouse-web:latest" .
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Login to DockerHub
        run: |
          echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to DockerHub
        run: |
          docker push "${DOCKER_USERNAME}/blockhouse-web:latest"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH for EC2
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_PRIVATE_KEY" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem
          # Add EC2 to known hosts to avoid the prompt
          ssh-keyscan -H $EC2_PUBLIC_IP >> ~/.ssh/known_hosts
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/private_key.pem
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/private_key.pem ubuntu@$EC2_PUBLIC_IP "echo 'SSH connection successful!'"
        env:
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}

      - name: Check if port 8000 is in use
        run: |
          docker ps -q --filter "expose=8000" | xargs -r docker stop
          docker ps -q --filter "expose=8000" | xargs -r docker rm
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Deploy to EC2
        run: |
          echo "Deploying Docker image to EC2 instance..."
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/private_key.pem ubuntu@$EC2_PUBLIC_IP "docker pull ${DOCKER_USERNAME}/blockhouse-web:latest && docker run -d -p 8080:8000 ${DOCKER_USERNAME}/blockhouse-web:latest"
        env:
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
